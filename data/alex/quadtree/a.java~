import java.util.*;

class U
{
	static void
	printf(String s, Object ... args)
	{
		System.out.printf(s, args);
	}
}


class Point
{
	int x, y;
	Point(int _x, int _y) {
		x = _x;
		y = _y;
	}
	
	public String toString() { return String.format("(%d, %d)", x, y); }
}

class QTree
{
	static int maxchild = 10;
	ArrayList<Point> items;
	QTree nw, ne, sw, se;
	int xmin = Integer.MAX_VALUE, xmax = Integer.MIN_VALUE, 
	    ymin = Integer.MAX_VALUE, ymax = Integer.MIN_VALUE;
		
	int midx, midy;
	
	static int id = 0;
	int thisid;
	int size = 0;
	
	QTree()
	{
		items = new ArrayList<Point>();
		
		thisid = id++;
		
	}
	
	QTree(ArrayList<Point> points)
	{
		thisid = id++;
		size = points.size();
		
		if (points.size() <= maxchild) {
			items = points;
			return;
		}
		
		Collections.sort(points, new Comparator<Point>() {
			public int compare(Point a, Point b) { return a.x - b.x; }
			public boolean equals(Object o) { return false; }
		});
				
		midx = points.get(points.size()/2+1).x;
		
		Collections.sort(points, new Comparator<Point>() {
			public int compare(Point a, Point b) { return a.y - b.y; }
			public boolean equals(Object o) { return false; }
		});
		
		midy = points.get(points.size()/2+1).y;
		
		ArrayList<Point> nwl = new ArrayList<Point>();
		ArrayList<Point> nel = new ArrayList<Point>();
		ArrayList<Point> swl = new ArrayList<Point>();
		ArrayList<Point> sel = new ArrayList<Point>();
		
		for (Point p : points) 
		{
				if (p.y >= midy) { // north
					if (p.x >= midx) { // east
						nel.add(p);
					}
					else { //west
						nwl.add(p);
					}
				}
				else { // south
					if (p.x >= midx) { // east
						sel.add(p);
					}
					else { //west
						swl.add(p);
					}
				}
		}
		
		nw = new QTree(nwl);
		ne = new QTree(nel);
		sw = new QTree(swl);
		se = new QTree(sel);
	}
	
	void
	add(Point p)
	{
		size++;
		
		if (p.x < xmin)
			xmin = p.x;
		if (p.y < ymin)
			ymin = p.y;
			
		if (p.x > xmax)
			xmax = p.x;
		if (p.y > ymax)
			ymax = p.y;
			
		
		if (items != null) // we are a leaf
		{
			items.add(p);

			if (items.size() > maxchild)
			{
				Collections.sort(items, new Comparator<Point>() {
					public int compare(Point a, Point b) { return a.x - b.x; }
					public boolean equals(Object o) { return false; }
				});
				
				midy = items.get(maxchild/2+1).x;
				
				Collections.sort(items, new Comparator<Point>() {
					public int compare(Point a, Point b) { return a.y - b.y; }
					public boolean equals(Object o) { return false; }
				});
				
				midy = items.get(maxchild/2+1).y;
				
				nw = new QTree();
				ne = new QTree();
				sw = new QTree();
				se = new QTree();
				
				for (Point tp : items) 
				{
					add_to_child(tp);
				}
				
				items = null;
			}
		}
		else { // not a leaf
			add_to_child(p);
		}
	}
	
	ArrayList<Point>
	get(int xboundmin, int yboundmin, int xboundmax, int yboundmax)
	{	
	
		ArrayList<Point> l = new ArrayList<Point>();
		
		if (items != null) // we're a leaf
		{
			U.printf("get from leaf %s (%d %d) (%d %d) id %d size %d\n", items, xmin, ymin, xmax, ymax, thisid, size);
			
			for (Point p : items) {
				if (p.x >= xboundmin && p.x <= xboundmax &&
				    p.y >= yboundmin && p.y <= yboundmax )
						l.add(p);
			}
			
			return l;
		}
		else {
			U.printf("get from non leaf (%d %d) (%d %d) id %d size %d ", xmin, ymin, xmax, ymax,thisid, size);
			
			if (yboundmin < midy) { // include south
				if (xboundmin < midx) { // include west
					U.printf("recurse sw\n");
					l.addAll(sw.get(xboundmin, yboundmin, xboundmax, yboundmax));
				}
				if (xboundmax >= midx) { // include east
					U.printf("recurse se\n");
					l.addAll(se.get(xboundmin, yboundmin, xboundmax, yboundmax));
				}
			}
			
			if (yboundmax >= midy) { // include north
				if (xboundmin < midx) { // include west
					U.printf("recurse nw\n");
					l.addAll(nw.get(xboundmin, yboundmin, xboundmax, yboundmax));
				}
				if (xboundmax >= midx) { // include east
					U.printf("recurse sw\n");
					l.addAll(ne.get(xboundmin, yboundmin, xboundmax, yboundmax));
				}
			}
			
			return l;
		}
	}
	
	void add_to_child(Point p) {
		if (p.y >= midy) { // north
			if (p.x >= midx) { // east
				ne.add(p);
			}
			else { //west
				nw.add(p);
			}
		}
		else { // south
			if (p.x >= midx) { // east
				se.add(p);
			}
			else { //west
				sw.add(p);
			}
		}
	}
	
	void dump(int l)
	{
			
		if (items != null) {
			for (int i = 0; i < l; i++) U.printf("\t");
			U.printf("leaf: id<%d> size:%d %s\n", thisid, size, items);
		}
		else {
			for (int i = 0; i < l; i++) U.printf("\t"); 
			U.printf("bounds (%d %d) (%d %d) id<%d> size:%d\n", xmin, ymin, xmax, ymax, thisid, size);
			
			for (int i = 0; i < l; i++) U.printf("\t"); U.printf("NE {\n");
			ne.dump(l+1);
			for (int i = 0; i < l; i++) U.printf("\t"); U.printf("}\n");
			
			for (int i = 0; i < l; i++) U.printf("\t"); U.printf("NW {\n");
			nw.dump(l+1);
			for (int i = 0; i < l; i++) U.printf("\t"); U.printf("}\n");
			
			for (int i = 0; i < l; i++) U.printf("\t"); U.printf("SW {\n");
			sw.dump(l+1);
			for (int i = 0; i < l; i++) U.printf("\t"); U.printf("}\n");
			
			for (int i = 0; i < l; i++) U.printf("\t"); U.printf("SE {\n");
			se.dump(l+1);
			for (int i = 0; i < l; i++) U.printf("\t"); U.printf("}\n");
			
		}
	}
}

class A
{	
	public static void 
	main(String args[])
	{
		U.printf("hello\n");
		ArrayList<Point> list = new ArrayList<Point>();
		add(list);
		
		QTree t = new QTree(list);
		
		//t.dump(0);
		
		int x = 43098780, y = -89307377;
		U.printf("get %d %d\n", x, y);
		//t.add(new Point(1, 1));
		//int x = 1, y = 1;
		ArrayList<Point> points = t.get(x, y, x, y);
		U.printf("points %s\n", points);
		
	}
	static void add(List<Point> t) 
	{
		t.add(new Point(43098780, -89307377));
		t.add(new Point(43148402, -89379602));
		t.add(new Point(43076892, -89282795));
		t.add(new Point(43053984, -89387278));
		t.add(new Point(43097850, -89317598));
		t.add(new Point(43077046, -89295990));
		t.add(new Point(43073069, -89400482));
		t.add(new Point(43068021, -89413801));
		t.add(new Point(42994060, -89519405));
		t.add(new Point(43094612, -89517119));
		t.add(new Point(43060714, -89481592));
		t.add(new Point(43068993, -89392141));
		t.add(new Point(43052449, -89483448));
		t.add(new Point(43096980, -89508678));
		t.add(new Point(43056810, -89502672));
		t.add(new Point(42990477, -89534049));
		t.add(new Point(43073419, -89282920));
		t.add(new Point(43060601, -89503129));
		t.add(new Point(43010966, -89492407));
		t.add(new Point(43053727, -89441939));
		t.add(new Point(43030878, -89414401));
		t.add(new Point(43053885, -89473671));
		t.add(new Point(43102562, -89513110));
		t.add(new Point(43121263, -89355174));
		t.add(new Point(43026227, -89491825));
		t.add(new Point(43075453, -89412714));
		t.add(new Point(43042585, -89354500));
		t.add(new Point(43048205, -89342223));
		t.add(new Point(43021309, -89421542));
		t.add(new Point(43025999, -89430542));
		t.add(new Point(43050764, -89437066));
		t.add(new Point(43067595, -89400343));
		t.add(new Point(43067578, -89398077));
		t.add(new Point(43071240, -89389250));
		t.add(new Point(43026059, -89475270));
		t.add(new Point(43038474, -89500019));
		t.add(new Point(43067708, -89401505));
		t.add(new Point(43084358, -89289517));
		t.add(new Point(43089232, -89329345));
		t.add(new Point(43075431, -89446406));
		t.add(new Point(43095684, -89316363));
		t.add(new Point(43060709, -89450745));
		t.add(new Point(43076434, -89420364));
		t.add(new Point(43070290, -89442116));
		t.add(new Point(43051312, -89439447));
		t.add(new Point(43076570, -89420675));
		t.add(new Point(43072593, -89430945));
		t.add(new Point(43062282, -89421016));
		t.add(new Point(43120199, -89333867));
		t.add(new Point(43121073, -89315540));
		t.add(new Point(43065857, -89478405));
		t.add(new Point(43133773, -89301187));
		t.add(new Point(43027140, -89496672));
		t.add(new Point(43070321, -89291376));
		t.add(new Point(43073367, -89401463));
		t.add(new Point(43054418, -89396633));
		t.add(new Point(43071201, -89404197));
		t.add(new Point(42990421, -89561057));
		t.add(new Point(43121169, -89300506));
		t.add(new Point(43084328, -89433663));
		t.add(new Point(43106277, -89507034));
		t.add(new Point(43055371, -89525597));
		t.add(new Point(43061562, -89497083));
		t.add(new Point(43131577, -89348553));
		t.add(new Point(43097353, -89289244));
		t.add(new Point(43132434, -89290431));
		t.add(new Point(43112824, -89331163));
		t.add(new Point(43102542, -89295815));
		t.add(new Point(43142473, -89305792));
		t.add(new Point(43115987, -89296487));
		t.add(new Point(43022389, -89505394));
		t.add(new Point(43032893, -89358280));
		t.add(new Point(43060330, -89291102));
		t.add(new Point(43035434, -89374592));
		t.add(new Point(43058573, -89315316));
		t.add(new Point(43051125, -89513993));
		t.add(new Point(43106509, -89498559));
		t.add(new Point(43134341, -89290198));
		t.add(new Point(43063802, -89471921));
		t.add(new Point(43062025, -89320145));
		t.add(new Point(43102158, -89486132));
		t.add(new Point(43071652, -89502796));
		t.add(new Point(43088182, -89502193));
		t.add(new Point(43102957, -89492875));
		t.add(new Point(43066637, -89524441));
		t.add(new Point(43098996, -89511407));
		t.add(new Point(43150717, -89290122));
		t.add(new Point(43112075, -89296131));
		t.add(new Point(43146118, -89291411));
		t.add(new Point(43107034, -89330949));
		t.add(new Point(43074315, -89397429));
		t.add(new Point(43076149, -89400692));
		t.add(new Point(43077604, -89388164));
		t.add(new Point(43037183, -89384608));
		t.add(new Point(43106867, -89353209));
		t.add(new Point(43090168, -89351014));
		t.add(new Point(43093637, -89361465));
		t.add(new Point(43090557, -89347340));
		t.add(new Point(43091721, -89335723));
		t.add(new Point(43018761, -89508511));
		t.add(new Point(43046328, -89479374));
		t.add(new Point(43069776, -89393793));
		t.add(new Point(43121310, -89307223));
		t.add(new Point(43078268, -89470392));
		t.add(new Point(43072371, -89393298));
		t.add(new Point(43078419, -89317850));
		t.add(new Point(43083603, -89324543));
		t.add(new Point(43080165, -89316264));
		t.add(new Point(43085012, -89369346));
		t.add(new Point(43034797, -89386452));
		t.add(new Point(43090750, -89343820));
		t.add(new Point(43080257, -89366954));
		t.add(new Point(43077807, -89370446));
		t.add(new Point(43106412, -89339574));
		t.add(new Point(43083795, -89371605));
		t.add(new Point(43114183, -89361655));
		t.add(new Point(43091727, -89355363));
		t.add(new Point(43099379, -89331504));
		t.add(new Point(43082755, -89363342));
		t.add(new Point(43097463, -89363936));
		t.add(new Point(43024035, -89479311));
		t.add(new Point(43039430, -89503727));
		t.add(new Point(43075125, -89519032));
		t.add(new Point(43038638, -89500038));
		t.add(new Point(43077020, -89529959));
		t.add(new Point(43111481, -89510959));
		t.add(new Point(43034734, -89473389));
		t.add(new Point(43036660, -89473517));
		t.add(new Point(43048503, -89438473));
		t.add(new Point(43050641, -89510988));
		t.add(new Point(43133837, -89389714));
		t.add(new Point(43090371, -89348939));
		t.add(new Point(43102851, -89345581));
		t.add(new Point(43102550, -89311317));
		t.add(new Point(43077001, -89299849));
		t.add(new Point(43078329, -89378808));
		t.add(new Point(43074900, -89393054));
		t.add(new Point(43076931, -89303121));
		t.add(new Point(43080912, -89302902));
		t.add(new Point(43086239, -89326214));
		t.add(new Point(43094180, -89370352));
		t.add(new Point(43094228, -89353370));
		t.add(new Point(43067719, -89413093));
		t.add(new Point(43059844, -89403674));
		t.add(new Point(43056365, -89382039));
		t.add(new Point(43075148, -89512563));
		t.add(new Point(43035099, -89452684));
		t.add(new Point(43152667, -89373813));
		t.add(new Point(43048109, -89439125));
		t.add(new Point(43145960, -89382707));
		t.add(new Point(43099848, -89335432));
		t.add(new Point(43004971, -89424720));
		t.add(new Point(43059120, -89293767));
		t.add(new Point(43143683, -89382916));
		t.add(new Point(43066437, -89314442));
		t.add(new Point(43067900, -89414323));
		t.add(new Point(43041796, -89403858));
		t.add(new Point(43091201, -89357968));
		t.add(new Point(43104835, -89351077));
		t.add(new Point(43041357, -89505043));
		t.add(new Point(43114057, -89363722));
		t.add(new Point(43101039, -89363946));
		t.add(new Point(43090345, -89292085));
		t.add(new Point(43078765, -89524428));
		t.add(new Point(43035601, -89374672));
		t.add(new Point(43075810, -89398970));
		t.add(new Point(43134825, -89360767));
		t.add(new Point(43075269, -89491545));
		t.add(new Point(43051750, -89377979));
		t.add(new Point(43061848, -89319836));
		t.add(new Point(43089087, -89438266));
		t.add(new Point(43058565, -89310111));
		t.add(new Point(43063319, -89404039));
		t.add(new Point(43096295, -89494903));
		t.add(new Point(43086398, -89533905));
		t.add(new Point(43072057, -89520280));
		t.add(new Point(43092356, -89489739));
		t.add(new Point(43080138, -89525044));
		t.add(new Point(43067621, -89493642));
		t.add(new Point(43081154, -89507003));
		t.add(new Point(43057837, -89514024));
		t.add(new Point(43094314, -89509615));
		t.add(new Point(43058376, -89509183));
		t.add(new Point(43050109, -89467017));
		t.add(new Point(43068101, -89423859));
		t.add(new Point(43144680, -89370290));
		t.add(new Point(43148350, -89379587));
		t.add(new Point(43064351, -89517280));
		t.add(new Point(43071983, -89408983));
		t.add(new Point(43031122, -89409525));
		t.add(new Point(42992608, -89526608));
		t.add(new Point(43001435, -89427828));
		t.add(new Point(43047247, -89374696));
		t.add(new Point(43067671, -89412906));
		t.add(new Point(43071834, -89382189));
		t.add(new Point(43053725, -89458407));
		t.add(new Point(43074878, -89438444));
		t.add(new Point(43058558, -89427260));
		t.add(new Point(43068143, -89473762));
		t.add(new Point(43083845, -89320337));
		t.add(new Point(43106947, -89300503));
		t.add(new Point(43120907, -89306822));
		t.add(new Point(43147841, -89294222));
		t.add(new Point(43068255, -89281750));
		t.add(new Point(43073505, -89407051));
		t.add(new Point(43056492, -89398700));
		t.add(new Point(43038513, -89398030));
		t.add(new Point(43042876, -89391838));
		t.add(new Point(43041994, -89404130));
		t.add(new Point(43080898, -89428297));
		t.add(new Point(43077245, -89425012));
		t.add(new Point(43046545, -89339839));
		t.add(new Point(43086637, -89441761));
		t.add(new Point(43007835, -89428684));
		t.add(new Point(43004879, -89427618));
		t.add(new Point(43065354, -89525751));
		t.add(new Point(43073548, -89288171));
		t.add(new Point(43113924, -89330523));
		t.add(new Point(43062357, -89291392));
		t.add(new Point(43102483, -89513050));
		t.add(new Point(43072096, -89525078));
		t.add(new Point(43087996, -89504274));
		t.add(new Point(43046231, -89373784));
		t.add(new Point(43148358, -89289935));
		t.add(new Point(43018307, -89497442));
		t.add(new Point(43109287, -89335506));
		t.add(new Point(43139435, -89311354));
		t.add(new Point(43127908, -89293556));
		t.add(new Point(43065058, -89291514));
		t.add(new Point(43067991, -89281823));
		t.add(new Point(43073679, -89291429));
		t.add(new Point(43091961, -89291128));
		t.add(new Point(43083989, -89325060));
		t.add(new Point(43096280, -89495629));
		t.add(new Point(43073849, -89434612));
		t.add(new Point(42995062, -89427672));
		t.add(new Point(43068041, -89447702));
		t.add(new Point(43067861, -89416538));
		t.add(new Point(43106755, -89345552));
		t.add(new Point(43068524, -89524392));
		t.add(new Point(43066510, -89508441));
		t.add(new Point(43067092, -89517732));
		t.add(new Point(43081302, -89506125));
		t.add(new Point(43092812, -89532422));
		t.add(new Point(43109169, -89312385));
		t.add(new Point(43115300, -89327328));
		t.add(new Point(43031383, -89381327));
		t.add(new Point(43125521, -89309290));
		t.add(new Point(43070630, -89281801));
		t.add(new Point(43033768, -89380406));
		t.add(new Point(43119178, -89363672));
		t.add(new Point(43076035, -89382407));
		t.add(new Point(43032340, -89386719));
		t.add(new Point(43078671, -89384114));
		t.add(new Point(43078706, -89368916));
		t.add(new Point(43092494, -89352819));
		t.add(new Point(43018726, -89498247));
		t.add(new Point(43012551, -89498608));
		t.add(new Point(43072972, -89419758));
		t.add(new Point(43050147, -89451551));
		t.add(new Point(43060440, -89441963));
		t.add(new Point(43041357, -89360731));
		t.add(new Point(43067248, -89291130));
		t.add(new Point(43066179, -89314333));
		t.add(new Point(43147130, -89362990));
		t.add(new Point(43098144, -89350823));
		t.add(new Point(43086508, -89375213));
		t.add(new Point(43105075, -89351318));
		t.add(new Point(43089816, -89369507));
		t.add(new Point(43089669, -89369464));
		t.add(new Point(43086406, -89354443));
		t.add(new Point(43095915, -89354118));
		t.add(new Point(43089994, -89524223));
		t.add(new Point(43094615, -89511416));
		t.add(new Point(43071737, -89502832));
		t.add(new Point(43038935, -89485832));
		t.add(new Point(43038900, -89461078));
		t.add(new Point(43046368, -89480763));
		t.add(new Point(43017465, -89510019));
		t.add(new Point(43073499, -89413699));
		t.add(new Point(43088472, -89352155));
		t.add(new Point(43053737, -89390313));
		t.add(new Point(43045809, -89392820));
		t.add(new Point(43073170, -89413972));
		t.add(new Point(43066328, -89303294));
		t.add(new Point(43067360, -89401102));
		t.add(new Point(43012847, -89502571));
		t.add(new Point(43067818, -89404379));
		t.add(new Point(43074844, -89392040));
		t.add(new Point(43062309, -89315672));
		t.add(new Point(43077109, -89319746));
		t.add(new Point(43090080, -89351110));
		t.add(new Point(43066904, -89308685));
		t.add(new Point(43075182, -89291427));
		t.add(new Point(43046239, -89494087));
		t.add(new Point(43121179, -89318348));
		t.add(new Point(43073035, -89397332));
		t.add(new Point(43088110, -89483146));
		t.add(new Point(43092017, -89290988));
		t.add(new Point(43090347, -89316655));
		t.add(new Point(43063364, -89486715));
		t.add(new Point(43148331, -89372368));
		t.add(new Point(43110617, -89474890));
		t.add(new Point(43093358, -89534282));
		t.add(new Point(43073298, -89295417));
		t.add(new Point(43042922, -89377438));
		t.add(new Point(43079633, -89283531));
		t.add(new Point(43090884, -89341150));
		t.add(new Point(43102425, -89364487));
		t.add(new Point(43114269, -89357265));
		t.add(new Point(43093868, -89357397));
		t.add(new Point(43033483, -89388045));
		t.add(new Point(43024392, -89499361));
		t.add(new Point(43073183, -89307168));
		t.add(new Point(43062294, -89295473));
		t.add(new Point(43053792, -89387208));
		t.add(new Point(43054636, -89397156));
		t.add(new Point(43143487, -89295649));
		t.add(new Point(43067447, -89400812));
		t.add(new Point(43076728, -89502157));
		t.add(new Point(43100534, -89493413));
		t.add(new Point(43074854, -89524157));
		t.add(new Point(43093922, -89485535));
		t.add(new Point(43063964, -89507513));
		t.add(new Point(43103198, -89535955));
		t.add(new Point(43026282, -89413078));
		t.add(new Point(43051213, -89481091));
		t.add(new Point(43070728, -89510354));
		t.add(new Point(43098050, -89303374));
		t.add(new Point(43127458, -89349215));
		t.add(new Point(43148323, -89368760));
		t.add(new Point(43047292, -89356162));
		t.add(new Point(43121047, -89324493));
		t.add(new Point(43075163, -89450399));
		t.add(new Point(43072366, -89425420));
		t.add(new Point(43079900, -89472261));
		t.add(new Point(43068442, -89451317));
		t.add(new Point(43076409, -89416219));
		t.add(new Point(43068090, -89476009));
		t.add(new Point(43082679, -89475470));
		t.add(new Point(43074804, -89391209));
		t.add(new Point(43071322, -89454890));
		t.add(new Point(43060126, -89400620));
		t.add(new Point(43073078, -89404181));
		t.add(new Point(43075489, -89451579));
		t.add(new Point(43067995, -89467991));
		t.add(new Point(43053743, -89460854));
		t.add(new Point(43137573, -89303396));
		t.add(new Point(43069574, -89446182));
		t.add(new Point(43074126, -89473968));
		t.add(new Point(43069478, -89444024));
		t.add(new Point(43082311, -89524737));
		t.add(new Point(43064053, -89517000));
		t.add(new Point(43110901, -89506998));
		t.add(new Point(43056524, -89502399));
		t.add(new Point(43131995, -89347213));
		t.add(new Point(43072731, -89387032));
		t.add(new Point(43045806, -89375611));
		t.add(new Point(43065159, -89403999));
		t.add(new Point(43073506, -89409433));
		t.add(new Point(43070150, -89387090));
		t.add(new Point(43065181, -89400965));
		t.add(new Point(43056542, -89499923));
		t.add(new Point(43090435, -89529942));
		t.add(new Point(43088013, -89532601));
		t.add(new Point(43092330, -89501906));
		t.add(new Point(43057390, -89503973));
		t.add(new Point(43063282, -89493227));
		t.add(new Point(43035937, -89443652));
		t.add(new Point(43019182, -89473880));
		t.add(new Point(43084275, -89433568));
		t.add(new Point(43027501, -89411750));
		t.add(new Point(43015224, -89431974));
		t.add(new Point(43026492, -89421656));
		t.add(new Point(43111386, -89514791));
		t.add(new Point(43093109, -89508833));
		t.add(new Point(43068386, -89502172));
		t.add(new Point(43060810, -89461335));
		t.add(new Point(43120194, -89329515));
		t.add(new Point(43108614, -89298854));
		t.add(new Point(43066932, -89423763));
		t.add(new Point(43095043, -89501861));
		t.add(new Point(43050401, -89506999));
		t.add(new Point(43060806, -89447236));
		t.add(new Point(43059920, -89401303));
		t.add(new Point(43060694, -89441601));
		t.add(new Point(43114291, -89328962));
		t.add(new Point(43050106, -89463387));
		t.add(new Point(43148314, -89375196));
		t.add(new Point(43115270, -89363854));
		t.add(new Point(43034418, -89415027));
		t.add(new Point(43148970, -89372117));
		t.add(new Point(43141006, -89300379));
		t.add(new Point(43122955, -89324783));
		t.add(new Point(43102138, -89292276));
		t.add(new Point(43041559, -89360932));
		t.add(new Point(43107170, -89330686));
		t.add(new Point(43098664, -89307332));
		t.add(new Point(43097109, -89358539));
		t.add(new Point(43084521, -89359145));
		t.add(new Point(43073427, -89288125));
		t.add(new Point(43098908, -89290621));
		t.add(new Point(43056565, -89496627));
		t.add(new Point(43097138, -89500333));
		t.add(new Point(43117445, -89323421));
		t.add(new Point(43146147, -89292322));
		t.add(new Point(43026796, -89414699));
		t.add(new Point(43046385, -89494075));
		t.add(new Point(43092991, -89371941));
		t.add(new Point(43073269, -89298719));
		t.add(new Point(43118987, -89297711));
		t.add(new Point(43038299, -89378557));
		t.add(new Point(43099932, -89341713));
		t.add(new Point(43106612, -89342826));
		t.add(new Point(43073339, -89282790));
		t.add(new Point(43034561, -89448523));
		t.add(new Point(43073288, -89411286));
		t.add(new Point(43074770, -89390277));
		t.add(new Point(43039135, -89477929));
		t.add(new Point(43022422, -89502569));
		t.add(new Point(43074995, -89457083));
		t.add(new Point(43106961, -89309961));
		t.add(new Point(43048257, -89339660));
		t.add(new Point(43158250, -89373844));
		t.add(new Point(43104027, -89343202));
		t.add(new Point(43104066, -89343097));
		t.add(new Point(43120936, -89314884));
		t.add(new Point(43026127, -89492119));
		t.add(new Point(43084322, -89376285));
		t.add(new Point(43106657, -89363976));
		t.add(new Point(43091863, -89372753));
		t.add(new Point(43061167, -89486451));
		t.add(new Point(43041333, -89477427));
		t.add(new Point(43075898, -89376695));
		t.add(new Point(43095592, -89326586));
		t.add(new Point(43102969, -89532066));
		t.add(new Point(43114169, -89328658));
		t.add(new Point(43071514, -89436596));
		t.add(new Point(43100058, -89331817));
		t.add(new Point(43082450, -89363518));
		t.add(new Point(43069396, -89403849));
		t.add(new Point(43076628, -89407048));
		t.add(new Point(43069393, -89402488));
		t.add(new Point(43075854, -89403802));
		t.add(new Point(43076070, -89405625));
		t.add(new Point(43050533, -89399882));
		t.add(new Point(43067831, -89415182));
		t.add(new Point(43075201, -89412309));
		t.add(new Point(43074672, -89387824));
		t.add(new Point(43031772, -89493285));
		t.add(new Point(43072894, -89400746));
		t.add(new Point(43145387, -89375289));
		t.add(new Point(43036049, -89497271));
		t.add(new Point(43076463, -89412947));
		t.add(new Point(43133327, -89301466));
		t.add(new Point(43124852, -89308964));
		t.add(new Point(43088262, -89527485));
		t.add(new Point(43079869, -89533959));
		t.add(new Point(43060927, -89492316));
		t.add(new Point(43073342, -89393874));
		t.add(new Point(43093428, -89348807));
		t.add(new Point(43106873, -89351712));
		t.add(new Point(43081773, -89379815));
		t.add(new Point(43053132, -89383808));
		t.add(new Point(43093772, -89346728));
		t.add(new Point(43105233, -89343144));
		t.add(new Point(43038249, -89378586));
		t.add(new Point(43045862, -89342637));
		t.add(new Point(43134119, -89315738));
		t.add(new Point(43051775, -89399231));
		t.add(new Point(43101735, -89331041));
		t.add(new Point(43039362, -89477752));
		t.add(new Point(43034736, -89488745));
		t.add(new Point(43060788, -89508170));
		t.add(new Point(43076914, -89531336));
		t.add(new Point(43095056, -89493859));
		t.add(new Point(43055359, -89503185));
		t.add(new Point(43052997, -89480859));
		t.add(new Point(43053485, -89486331));
		t.add(new Point(43075138, -89482257));
		t.add(new Point(43098305, -89532101));
		t.add(new Point(43078725, -89524277));
		t.add(new Point(43060682, -89517867));
		t.add(new Point(43058717, -89517601));
		t.add(new Point(43054892, -89489905));
		t.add(new Point(43083686, -89320729));
		t.add(new Point(43126984, -89310942));
		t.add(new Point(43145060, -89373729));
		t.add(new Point(43068038, -89473700));
		t.add(new Point(43053779, -89464841));
		t.add(new Point(43064394, -89425260));
		t.add(new Point(43049922, -89450959));
		t.add(new Point(43073047, -89457127));
		t.add(new Point(43067808, -89397867));
		t.add(new Point(43065888, -89396488));
		t.add(new Point(43044252, -89391901));
		t.add(new Point(43051168, -89444134));
		t.add(new Point(43088024, -89533036));
		t.add(new Point(43069193, -89454093));
		t.add(new Point(43068654, -89454691));
		t.add(new Point(43090347, -89486719));
		t.add(new Point(43041911, -89477547));
		t.add(new Point(43100351, -89486146));
		t.add(new Point(43101816, -89518171));
		t.add(new Point(43052103, -89380620));
		t.add(new Point(43040333, -89384308));
		t.add(new Point(43050106, -89450716));
		t.add(new Point(43075236, -89507272));
		t.add(new Point(43053402, -89444524));
		t.add(new Point(43057610, -89441784));
		t.add(new Point(43075345, -89317866));
		t.add(new Point(43067454, -89493517));
		t.add(new Point(43111349, -89363773));
		t.add(new Point(43098705, -89310032));
		t.add(new Point(43085000, -89325660));
		t.add(new Point(43085829, -89303262));
		t.add(new Point(43075012, -89531322));
		t.add(new Point(43089543, -89508633));
		t.add(new Point(43000008, -89426257));
		t.add(new Point(43015287, -89480844));
		t.add(new Point(43035184, -89410399));
		t.add(new Point(43068294, -89468252));
		t.add(new Point(43083884, -89526987));
		t.add(new Point(43111980, -89296315));
		t.add(new Point(43053069, -89434927));
		t.add(new Point(43062063, -89426191));
		t.add(new Point(43071305, -89452812));
		t.add(new Point(43053540, -89485680));
		t.add(new Point(43099196, -89288789));
		t.add(new Point(43070416, -89441650));
		t.add(new Point(43102581, -89295945));
		t.add(new Point(43150234, -89293476));
		t.add(new Point(43142581, -89363353));
		t.add(new Point(43082575, -89324443));
		t.add(new Point(43095452, -89291053));
		t.add(new Point(43073098, -89308054));
		t.add(new Point(43062180, -89319972));
		t.add(new Point(43094861, -89302153));
		t.add(new Point(43135538, -89300009));
		t.add(new Point(43098854, -89305953));
		t.add(new Point(43088338, -89364485));
		t.add(new Point(43038265, -89380567));
		t.add(new Point(43093288, -89326693));
		t.add(new Point(43063239, -89486681));
		t.add(new Point(43019337, -89473915));
		t.add(new Point(43024824, -89459436));
		t.add(new Point(43099076, -89511576));
		t.add(new Point(43054288, -89520881));
		t.add(new Point(43080234, -89524724));
		t.add(new Point(43098276, -89522797));
		t.add(new Point(43071940, -89525347));
		t.add(new Point(43014083, -89428406));
		t.add(new Point(43130547, -89301967));
		t.add(new Point(43106902, -89310088));
		t.add(new Point(43108780, -89299009));
		t.add(new Point(43121018, -89300537));
		t.add(new Point(43035610, -89379524));
		t.add(new Point(43015867, -89491196));
		t.add(new Point(43100346, -89354130));
		t.add(new Point(43046425, -89484361));
		t.add(new Point(43058024, -89297694));
		t.add(new Point(43088406, -89316389));
		t.add(new Point(43135595, -89300019));
		t.add(new Point(43034965, -89370783));
		t.add(new Point(43085713, -89361026));
		t.add(new Point(43103090, -89350631));
		t.add(new Point(43031739, -89465314));
		t.add(new Point(43038875, -89404173));
		t.add(new Point(43067897, -89417122));
		t.add(new Point(43067716, -89423717));
		t.add(new Point(43058220, -89427470));
		t.add(new Point(43132614, -89363354));
		t.add(new Point(43088842, -89364401));
		t.add(new Point(43076112, -89383795));
		t.add(new Point(43092341, -89354874));
		t.add(new Point(43100640, -89353925));
		t.add(new Point(43133808, -89380586));
		t.add(new Point(43084004, -89378741));
		t.add(new Point(43098533, -89314063));
		t.add(new Point(43092812, -89371949));
		t.add(new Point(43083128, -89378144));
		t.add(new Point(43110342, -89363896));
		t.add(new Point(43111376, -89361661));
		t.add(new Point(43093931, -89524905));
		t.add(new Point(43091394, -89358080));
		t.add(new Point(43086212, -89528198));
		t.add(new Point(43093851, -89342317));
		t.add(new Point(43059485, -89469071));
		t.add(new Point(43060970, -89460993));
		t.add(new Point(43055941, -89473471));
		t.add(new Point(43068608, -89388929));
		t.add(new Point(43052513, -89381287));
		t.add(new Point(43039262, -89478064));
		t.add(new Point(43085793, -89355492));
		t.add(new Point(43074391, -89378801));
		t.add(new Point(43039184, -89503140));
		t.add(new Point(43098507, -89350738));
		t.add(new Point(43015422, -89431853));
		t.add(new Point(43036861, -89405319));
		t.add(new Point(43028916, -89456105));
		t.add(new Point(43031752, -89470346));
		t.add(new Point(43038599, -89451354));
		t.add(new Point(43039277, -89450942));
		t.add(new Point(43000937, -89428176));
		t.add(new Point(43027842, -89463737));
		t.add(new Point(43021958, -89498844));
		t.add(new Point(43075309, -89498288));
		t.add(new Point(43054294, -89520555));
		t.add(new Point(43032229, -89473371));
		t.add(new Point(43075047, -89406479));
		t.add(new Point(43072017, -89397174));
		t.add(new Point(43049652, -89392632));
		t.add(new Point(43012872, -89502455));
		t.add(new Point(43016132, -89511408));
		t.add(new Point(43068067, -89499020));
		t.add(new Point(43017600, -89510140));
		t.add(new Point(43022076, -89503083));
		t.add(new Point(43139774, -89388276));
		t.add(new Point(43148335, -89375416));
		t.add(new Point(43075289, -89317975));
		t.add(new Point(43099020, -89296822));
		t.add(new Point(43066334, -89285098));
		t.add(new Point(43035067, -89435345));
		t.add(new Point(43037751, -89443532));
		t.add(new Point(43098774, -89300405));
		t.add(new Point(43110901, -89506998));
		t.add(new Point(42997185, -89426778));
		t.add(new Point(43024854, -89475100));
		t.add(new Point(43067588, -89497255));
		t.add(new Point(43085486, -89532646));
		t.add(new Point(43086030, -89533721));
		t.add(new Point(43033246, -89456845));
		t.add(new Point(43060568, -89507485));
		t.add(new Point(43141173, -89383020));
		t.add(new Point(43135789, -89376552));
		t.add(new Point(43142864, -89363122));
		t.add(new Point(43062513, -89295672));
		t.add(new Point(43113803, -89330741));
		t.add(new Point(43073422, -89403855));
		t.add(new Point(43072463, -89387307));
		t.add(new Point(43026620, -89419172));
		t.add(new Point(43031414, -89405935));
		t.add(new Point(43068164, -89471462));
		t.add(new Point(43053730, -89470410));
		t.add(new Point(43049967, -89457881));
		t.add(new Point(43072989, -89467467));
		t.add(new Point(43053689, -89454690));
		t.add(new Point(43074097, -89467913));
		t.add(new Point(43077155, -89320161));
		t.add(new Point(43125453, -89323040));
		t.add(new Point(43054058, -89399130));
		t.add(new Point(43053954, -89391915));
		t.add(new Point(43038522, -89390684));
		t.add(new Point(43081493, -89316176));
		t.add(new Point(43098438, -89317814));
		t.add(new Point(43021947, -89420455));
		t.add(new Point(43039039, -89450068));
		t.add(new Point(43030803, -89456654));
		t.add(new Point(43069955, -89291544));
		t.add(new Point(43088887, -89316307));
		t.add(new Point(43084601, -89294083));
		t.add(new Point(43077017, -89320195));
		t.add(new Point(43076759, -89426059));
		t.add(new Point(43086325, -89438598));
		t.add(new Point(43059207, -89441949));
		t.add(new Point(43068169, -89450162));
		t.add(new Point(43061364, -89478396));
		t.add(new Point(43060187, -89427267));
		t.add(new Point(43061175, -89457370));
		t.add(new Point(43072684, -89421791));
		t.add(new Point(43075364, -89443430));
		t.add(new Point(43075127, -89441055));
		t.add(new Point(43074932, -89477666));
		t.add(new Point(43106242, -89330983));
		t.add(new Point(43026949, -89496946));
		t.add(new Point(43128598, -89348675));
		t.add(new Point(43137308, -89346522));
		t.add(new Point(43067089, -89291346));
		t.add(new Point(43061887, -89293658));
		t.add(new Point(43099102, -89301544));
		t.add(new Point(43130804, -89304861));
		t.add(new Point(43128258, -89307523));
		t.add(new Point(43090551, -89356518));
		t.add(new Point(43080788, -89381308));
		t.add(new Point(43085246, -89376939));
		t.add(new Point(43096934, -89368302));
		t.add(new Point(43075651, -89376688));
		t.add(new Point(43016096, -89423006));
		t.add(new Point(43079609, -89472327));
		t.add(new Point(43006817, -89420439));
		t.add(new Point(43112371, -89330515));
		t.add(new Point(43063017, -89478497));
		t.add(new Point(43032253, -89448858));
		t.add(new Point(43093244, -89526617));
		t.add(new Point(43054936, -89491649));
		t.add(new Point(43066560, -89508587));
		t.add(new Point(43084707, -89477774));
		t.add(new Point(43063352, -89493242));
		t.add(new Point(43075087, -89509374));
		t.add(new Point(43080261, -89525031));
		t.add(new Point(43126354, -89363707));
		t.add(new Point(43140302, -89363068));
		t.add(new Point(43131979, -89297719));
		t.add(new Point(43080227, -89366862));
		t.add(new Point(43125358, -89299740));
		t.add(new Point(43031960, -89493853));
		t.add(new Point(43059453, -89319759));
		t.add(new Point(43042266, -89369518));
		t.add(new Point(43040895, -89355557));
		t.add(new Point(43086200, -89303018));
		t.add(new Point(43042814, -89378494));
		t.add(new Point(43051812, -89390878));
		t.add(new Point(43073827, -89526509));
		t.add(new Point(42989343, -89540031));
		t.add(new Point(43038697, -89499730));
		t.add(new Point(43099981, -89341378));
		t.add(new Point(43104326, -89341632));
		t.add(new Point(43076950, -89373573));
		t.add(new Point(43072790, -89381014));
		t.add(new Point(43090833, -89343448));
		t.add(new Point(43096440, -89354029));
		t.add(new Point(43047197, -89340329));
		t.add(new Point(43046965, -89340698));
		t.add(new Point(43092581, -89352876));
		t.add(new Point(43074558, -89400529));
		t.add(new Point(43093933, -89341917));
		t.add(new Point(43129176, -89362192));
		t.add(new Point(43121770, -89353923));
		t.add(new Point(43109373, -89363835));
		t.add(new Point(43109958, -89310019));
		t.add(new Point(43081514, -89382324));
		t.add(new Point(43099990, -89344119));
		t.add(new Point(43097032, -89358523));
		t.add(new Point(43089721, -89437322));
		t.add(new Point(43100064, -89486525));
		t.add(new Point(43062116, -89323248));
		t.add(new Point(43091658, -89302256));
		t.add(new Point(43057308, -89398990));
		t.add(new Point(43037720, -89446442));
		t.add(new Point(43074258, -89397514));
		t.add(new Point(43039080, -89467287));
		t.add(new Point(43027009, -89505491));
		t.add(new Point(43070038, -89390899));
		t.add(new Point(43066758, -89395762));
		t.add(new Point(43079736, -89382935));
		t.add(new Point(43024325, -89414865));
		t.add(new Point(43089833, -89329101));
		t.add(new Point(43065527, -89404126));
		t.add(new Point(43021914, -89418909));
		t.add(new Point(43137182, -89380833));
		t.add(new Point(43106353, -89521102));
		t.add(new Point(43057406, -89510753));
		t.add(new Point(43072379, -89519753));
		t.add(new Point(43044149, -89443442));
		t.add(new Point(43041219, -89447407));
		t.add(new Point(43042199, -89451286));
		t.add(new Point(43037786, -89446333));
		t.add(new Point(43057082, -89428936));
		t.add(new Point(43072267, -89423809));
		t.add(new Point(43084239, -89428972));
		t.add(new Point(43063746, -89418806));
		t.add(new Point(43081493, -89316323));
		t.add(new Point(43053798, -89441820));
		t.add(new Point(43058637, -89312890));
		t.add(new Point(43039257, -89486007));
		t.add(new Point(43032009, -89473736));
		t.add(new Point(43038912, -89461135));
		t.add(new Point(43143983, -89291099));
		t.add(new Point(43032216, -89493535));
		t.add(new Point(43047506, -89304260));
		t.add(new Point(43063271, -89488997));
		t.add(new Point(43096315, -89488836));
		t.add(new Point(43071032, -89404524));
		t.add(new Point(43038996, -89473412));
		t.add(new Point(43015437, -89503224));
		t.add(new Point(43031990, -89468228));
		t.add(new Point(43046583, -89496474));
		t.add(new Point(43045897, -89503358));
		t.add(new Point(43062047, -89294099));
		t.add(new Point(43073196, -89291534));
		t.add(new Point(43077162, -89291802));
		t.add(new Point(43090197, -89321586));
		t.add(new Point(43070209, -89281823));
		t.add(new Point(43073591, -89314100));
		t.add(new Point(43090613, -89292027));
		t.add(new Point(43049358, -89351381));
		t.add(new Point(43024771, -89474592));
		t.add(new Point(43001403, -89425541));
		t.add(new Point(43025322, -89455944));
		t.add(new Point(43011622, -89429644));
		t.add(new Point(43114157, -89296000));
		t.add(new Point(43132596, -89288173));
		t.add(new Point(43043317, -89377058));
		t.add(new Point(43067860, -89407154));
		t.add(new Point(43015422, -89490853));
		t.add(new Point(43072289, -89423684));
		t.add(new Point(43062457, -89436294));
		t.add(new Point(43077742, -89470174));
		t.add(new Point(43053451, -89447647));
		t.add(new Point(43077622, -89479663));
		t.add(new Point(43074277, -89473417));
		t.add(new Point(43067380, -89291206));
		t.add(new Point(43058298, -89292205));
		t.add(new Point(43073638, -89391447));
		t.add(new Point(43079475, -89303021));
		t.add(new Point(43073881, -89313931));
		t.add(new Point(43046312, -89484385));
		t.add(new Point(43026651, -89462074));
		t.add(new Point(43077030, -89428301));
		t.add(new Point(43060753, -89423768));
		t.add(new Point(43062704, -89458383));
		t.add(new Point(43049491, -89473677));
		t.add(new Point(43127985, -89308650));
		t.add(new Point(43127437, -89307109));
		t.add(new Point(43099248, -89288630));
		t.add(new Point(42993786, -89519230));
		t.add(new Point(43113651, -89296222));
		t.add(new Point(43031418, -89410612));
		t.add(new Point(43059243, -89468739));
		t.add(new Point(43067955, -89421054));
		t.add(new Point(43068022, -89428187));
		t.add(new Point(43106734, -89305139));
		t.add(new Point(43122880, -89324674));
		t.add(new Point(43091785, -89302181));
		t.add(new Point(43110704, -89334098));
		t.add(new Point(43117278, -89330458));
		t.add(new Point(43088981, -89371606));
		t.add(new Point(42995198, -89563985));
		t.add(new Point(43074447, -89382170));
		t.add(new Point(43118978, -89321044));
		t.add(new Point(43072788, -89421867));
		t.add(new Point(43076409, -89413023));
		t.add(new Point(43079531, -89529356));
		t.add(new Point(43136378, -89290797));
		t.add(new Point(43053596, -89463716));
		t.add(new Point(43082212, -89524400));
		t.add(new Point(43105559, -89510965));
		t.add(new Point(43024532, -89475340));
		t.add(new Point(43067395, -89454775));
		t.add(new Point(43119128, -89363828));
		t.add(new Point(43113919, -89363883));
		t.add(new Point(43106605, -89363886));
		t.add(new Point(43092836, -89338425));
		t.add(new Point(43140528, -89309242));
		t.add(new Point(43088438, -89302698));
		t.add(new Point(43070832, -89404028));
		t.add(new Point(43074380, -89282991));
		t.add(new Point(43053590, -89469579));
		t.add(new Point(43087192, -89292958));
		t.add(new Point(43072918, -89463696));
		t.add(new Point(43147799, -89367481));
		t.add(new Point(43137476, -89380931));
		t.add(new Point(43142465, -89302905));
		t.add(new Point(43038666, -89401933));
		t.add(new Point(43092006, -89337079));
		t.add(new Point(43042593, -89384138));
		t.add(new Point(43077325, -89372372));
		t.add(new Point(43062537, -89291501));
		t.add(new Point(43075914, -89403619));
		t.add(new Point(43077450, -89412670));
		t.add(new Point(43072215, -89397524));
		t.add(new Point(43087051, -89293063));
		t.add(new Point(43056434, -89291907));
		t.add(new Point(43088772, -89293118));
		t.add(new Point(43094038, -89340583));
		t.add(new Point(43079666, -89283364));
		t.add(new Point(43106697, -89354366));
		t.add(new Point(43062942, -89404119));
		t.add(new Point(43074994, -89395478));
		t.add(new Point(43074810, -89393712));
		t.add(new Point(43085865, -89360575));
		t.add(new Point(43063425, -89399943));
		t.add(new Point(43078760, -89378724));
		t.add(new Point(43093997, -89340930));
		t.add(new Point(43075329, -89525025));
		t.add(new Point(43106351, -89506879));
		t.add(new Point(43139004, -89396770));
		t.add(new Point(43034736, -89428452));
		t.add(new Point(43067881, -89423468));
		t.add(new Point(43065587, -89470126));
		t.add(new Point(43060788, -89443519));
		t.add(new Point(43082282, -89475344));
		t.add(new Point(43093708, -89357055));
		t.add(new Point(43098138, -89326231));
		t.add(new Point(43104612, -89364012));
		t.add(new Point(43076046, -89384707));
		t.add(new Point(43073372, -89383802));
		t.add(new Point(43031927, -89496582));
		t.add(new Point(43036738, -89473386));
		t.add(new Point(43034867, -89452820));
		t.add(new Point(43085868, -89294271));
		t.add(new Point(43031831, -89483415));
		t.add(new Point(43031848, -89461976));
		t.add(new Point(43019973, -89506403));
		t.add(new Point(43060847, -89503186));
		t.add(new Point(43091300, -89327830));
		t.add(new Point(43129226, -89348355));
		t.add(new Point(43126425, -89310890));
		t.add(new Point(43101340, -89301536));
		t.add(new Point(43109436, -89312367));
		t.add(new Point(43148221, -89368642));
		t.add(new Point(43059440, -89294099));
		t.add(new Point(43033731, -89367097));
		t.add(new Point(43089995, -89526705));
		t.add(new Point(43046485, -89496588));
		t.add(new Point(43056289, -89430408));
		t.add(new Point(43034207, -89454990));
		t.add(new Point(43027154, -89459602));
		t.add(new Point(42995467, -89425402));
		t.add(new Point(43021046, -89477529));
		t.add(new Point(43031334, -89459113));
		t.add(new Point(43008348, -89482351));
		t.add(new Point(43128682, -89305224));
		t.add(new Point(43150757, -89296706));
		t.add(new Point(43063742, -89400630));
		t.add(new Point(43045746, -89392746));
		t.add(new Point(43044105, -89473966));
		t.add(new Point(43096348, -89486360));
		t.add(new Point(43096881, -89508142));
		t.add(new Point(43102724, -89486426));
		t.add(new Point(43012947, -89490767));
		t.add(new Point(43058797, -89310023));
		t.add(new Point(43061306, -89309886));
		t.add(new Point(43034469, -89443962));
		t.add(new Point(43049827, -89458022));
		t.add(new Point(43070684, -89423704));
		t.add(new Point(43101021, -89511481));
		t.add(new Point(43096677, -89495428));
		t.add(new Point(43061088, -89457702));
		t.add(new Point(43073072, -89467129));
		t.add(new Point(43074663, -89467747));
		t.add(new Point(43072942, -89457299));
		t.add(new Point(43084058, -89477395));
		t.add(new Point(43074948, -89518262));
		t.add(new Point(43053570, -89444151));
		t.add(new Point(43081270, -89481317));
		t.add(new Point(43071397, -89453136));
		t.add(new Point(43050063, -89474030));
		t.add(new Point(43078223, -89433443));
		t.add(new Point(43032605, -89461685));
		t.add(new Point(43067922, -89426124));
		t.add(new Point(43069446, -89446057));
		t.add(new Point(43018984, -89419792));
		t.add(new Point(43133331, -89287915));
		t.add(new Point(43135518, -89302384));
		t.add(new Point(43134389, -89315566));
		t.add(new Point(43131485, -89297650));
		t.add(new Point(43125739, -89349818));
		t.add(new Point(43130854, -89315269));
		t.add(new Point(43148578, -89286324));
		t.add(new Point(43055130, -89491724));
		t.add(new Point(43111659, -89510421));
		t.add(new Point(43051636, -89481192));
		t.add(new Point(43095238, -89523499));
		t.add(new Point(43030921, -89402671));
		t.add(new Point(43106915, -89347308));
		t.add(new Point(43030127, -89399157));
		t.add(new Point(43035215, -89433016));
		t.add(new Point(43050569, -89502962));
		t.add(new Point(43059922, -89427198));
		t.add(new Point(43067921, -89478168));
		t.add(new Point(43073811, -89436152));
		t.add(new Point(43071321, -89438640));
		t.add(new Point(43055960, -89441938));
		t.add(new Point(43034991, -89428986));
		t.add(new Point(43027776, -89463791));
		t.add(new Point(43056079, -89471859));
		t.add(new Point(43039941, -89449076));
		t.add(new Point(43072360, -89425780));
		t.add(new Point(43120325, -89334128));
		t.add(new Point(43125664, -89329773));
		t.add(new Point(43135749, -89315591));
		t.add(new Point(43063382, -89478407));
		t.add(new Point(43065323, -89416633));
		t.add(new Point(43127379, -89348977));
		t.add(new Point(43048079, -89342253));
		t.add(new Point(43091836, -89372718));
		t.add(new Point(43088626, -89357789));
		t.add(new Point(43152933, -89378204));
		t.add(new Point(43140891, -89382877));
		t.add(new Point(43131847, -89365814));
		t.add(new Point(43086033, -89325903));
		t.add(new Point(43010989, -89492175));
		t.add(new Point(43067534, -89403989));
		t.add(new Point(43062937, -89400947));
		t.add(new Point(43039229, -89477236));
		t.add(new Point(43030511, -89507769));
		t.add(new Point(43083701, -89316304));
		t.add(new Point(43121083, -89311949));
		t.add(new Point(43140791, -89395223));
		t.add(new Point(43077898, -89303257));
		t.add(new Point(43147431, -89363252));
		t.add(new Point(43087276, -89366583));
		t.add(new Point(43134858, -89363461));
		t.add(new Point(43070321, -89413920));
		t.add(new Point(43074043, -89406105));
		t.add(new Point(43078499, -89386589));
		t.add(new Point(43091733, -89365766));
		t.add(new Point(43095069, -89501754));
		t.add(new Point(43101146, -89511350));
		t.add(new Point(43060616, -89500860));
		t.add(new Point(43073960, -89435904));
		t.add(new Point(43101439, -89349567));
		t.add(new Point(43090220, -89529859));
		t.add(new Point(43133168, -89368901));
		t.add(new Point(43147648, -89367261));
		t.add(new Point(43133837, -89386192));
		t.add(new Point(43069713, -89404121));
		t.add(new Point(43090657, -89325406));
		t.add(new Point(43148255, -89371647));
		t.add(new Point(43068080, -89314309));
		t.add(new Point(43024316, -89470257));
		t.add(new Point(43034945, -89433609));
		t.add(new Point(43054033, -89390000));
		t.add(new Point(43086871, -89372750));
		t.add(new Point(43098618, -89329599));
		t.add(new Point(43067715, -89400642));
		t.add(new Point(43096919, -89351420));
		t.add(new Point(43093902, -89345240));
		t.add(new Point(43031792, -89488368));
		t.add(new Point(43044316, -89474106));
		t.add(new Point(43067875, -89409280));
		t.add(new Point(43048217, -89344494));
		t.add(new Point(43048067, -89345251));
		t.add(new Point(43085623, -89357089));
		t.add(new Point(43102202, -89349735));
		t.add(new Point(43100160, -89349162));
		t.add(new Point(43106729, -89343158));
		t.add(new Point(43091357, -89338895));
		t.add(new Point(43097433, -89364103));
		t.add(new Point(43024093, -89479209));
		t.add(new Point(43091994, -89360038));
		t.add(new Point(43061323, -89472023));
		t.add(new Point(43045827, -89473669));
		t.add(new Point(43118748, -89354889));
		t.add(new Point(43075145, -89407541));
		t.add(new Point(43038438, -89388472));
		t.add(new Point(43068307, -89401008));
		t.add(new Point(43075371, -89391056));
		t.add(new Point(43050666, -89507819));
		t.add(new Point(43110814, -89330623));
		t.add(new Point(43075366, -89507631));
		t.add(new Point(43065284, -89291340));
		t.add(new Point(43061875, -89319964));
		t.add(new Point(43087462, -89327075));
		t.add(new Point(43084541, -89289696));
		t.add(new Point(43077162, -89295599));
		t.add(new Point(43066668, -89308863));
		t.add(new Point(43093337, -89525198));
		t.add(new Point(43050789, -89511133));
		t.add(new Point(43041377, -89504827));
		t.add(new Point(43060958, -89486858));
		t.add(new Point(43034455, -89414893));
		t.add(new Point(43070178, -89520028));
		t.add(new Point(43050150, -89478210));
		t.add(new Point(43034988, -89422518));
		t.add(new Point(43026199, -89489193));
		t.add(new Point(43128985, -89363452));
		t.add(new Point(43037704, -89443563));
		t.add(new Point(43021029, -89417915));
		t.add(new Point(43035657, -89422336));
		t.add(new Point(43032205, -89452589));
		t.add(new Point(43031379, -89461778));
		t.add(new Point(43138436, -89313100));
		t.add(new Point(43130543, -89310194));
		t.add(new Point(43097289, -89288978));
		t.add(new Point(43098146, -89523248));
		t.add(new Point(43107752, -89479967));
		t.add(new Point(43105587, -89484423));
		t.add(new Point(43097888, -89494637));
		t.add(new Point(43125384, -89308729));
		t.add(new Point(43084641, -89369441));
		t.add(new Point(43048290, -89392688));
		t.add(new Point(43067968, -89404154));
		t.add(new Point(43054082, -89391907));
		t.add(new Point(43074751, -89527366));
		t.add(new Point(43056573, -89496122));
		t.add(new Point(42992831, -89526773));
		t.add(new Point(42990674, -89560609));
		t.add(new Point(43108917, -89501522));
		t.add(new Point(43042314, -89450953));
		t.add(new Point(43039091, -89463909));
		t.add(new Point(43054052, -89473336));
		t.add(new Point(43057409, -89428747));
		t.add(new Point(43048649, -89473331));
		t.add(new Point(43090519, -89347115));
		t.add(new Point(43071379, -89478079));
		t.add(new Point(43055951, -89441765));
		t.add(new Point(43060595, -89423637));
		t.add(new Point(43038941, -89488611));
		t.add(new Point(43138696, -89312876));
		t.add(new Point(43140570, -89300208));
		t.add(new Point(43123254, -89315321));
		t.add(new Point(43033562, -89366368));
		t.add(new Point(43068112, -89447234));
		t.add(new Point(43079614, -89376966));
		t.add(new Point(43049124, -89496084));
		t.add(new Point(43015464, -89503135));
		t.add(new Point(43058488, -89315294));
		t.add(new Point(43082987, -89286088));
		t.add(new Point(43085978, -89294128));
		t.add(new Point(43068672, -89524157));
		t.add(new Point(43049185, -89393612));
		t.add(new Point(43041569, -89394208));
		t.add(new Point(43063945, -89512543));
		t.add(new Point(43061632, -89497222));
		t.add(new Point(43094346, -89361755));
		t.add(new Point(43099883, -89336712));
		t.add(new Point(43093314, -89360601));
		t.add(new Point(43098376, -89351421));
		t.add(new Point(43055697, -89467988));
		t.add(new Point(43084051, -89478088));
		t.add(new Point(43067981, -89424062));
		t.add(new Point(43109449, -89335750));
		t.add(new Point(43053597, -89458804));
		t.add(new Point(43061044, -89472588));
		t.add(new Point(43065860, -89478526));
		t.add(new Point(43074534, -89477690));
		t.add(new Point(43053580, -89455119));
		t.add(new Point(43076938, -89299809));
		t.add(new Point(43062853, -89308854));
		t.add(new Point(43130020, -89361254));
		t.add(new Point(43091658, -89336000));
		t.add(new Point(43070036, -89314397));
		t.add(new Point(43090406, -89356379));
		t.add(new Point(43047261, -89344986));
		t.add(new Point(43042223, -89354269));
		t.add(new Point(43070848, -89395205));
		t.add(new Point(43122529, -89355200));
		t.add(new Point(43050175, -89500996));
		t.add(new Point(43019667, -89506955));
		t.add(new Point(43041084, -89486526));
		t.add(new Point(43016097, -89496771));
		t.add(new Point(43072158, -89404312));
		t.add(new Point(43049469, -89393951));
		t.add(new Point(43096910, -89498607));
		t.add(new Point(43077096, -89319880));
		t.add(new Point(43083875, -89303169));
		t.add(new Point(43093823, -89485937));
		t.add(new Point(43067853, -89420985));
		t.add(new Point(43066171, -89415384));
		t.add(new Point(43096998, -89501335));
		t.add(new Point(43050096, -89470555));
		t.add(new Point(43074633, -89438481));
		t.add(new Point(43071430, -89478187));
		t.add(new Point(43059177, -89319689));
		t.add(new Point(43130200, -89355626));
		t.add(new Point(43123140, -89363744));
		t.add(new Point(43087175, -89353376));
		t.add(new Point(43100616, -89364120));
		t.add(new Point(43091551, -89338468));
		t.add(new Point(43106521, -89355083));
		t.add(new Point(43042678, -89378425));
		t.add(new Point(43097825, -89326637));
		t.add(new Point(43054120, -89395510));
		t.add(new Point(43069851, -89390442));
		t.add(new Point(43046318, -89477750));
		t.add(new Point(43033657, -89477220));
		t.add(new Point(43047536, -89356295));
		t.add(new Point(43088874, -89357781));
		t.add(new Point(43100015, -89343123));
		t.add(new Point(43073659, -89314207));
		t.add(new Point(43093198, -89326822));
		t.add(new Point(43084625, -89358974));
		t.add(new Point(43088217, -89352238));
		t.add(new Point(43100853, -89349118));
		t.add(new Point(43098284, -89329173));
		t.add(new Point(43131024, -89363410));
		t.add(new Point(43038853, -89403803));
		t.add(new Point(43073941, -89315423));
		t.add(new Point(43030976, -89414448));
		t.add(new Point(43072305, -89405822));
		t.add(new Point(43099094, -89291236));
		t.add(new Point(43055744, -89381871));
		t.add(new Point(43075849, -89396996));
		t.add(new Point(43109665, -89537767));
		t.add(new Point(43091574, -89519015));
		t.add(new Point(43072943, -89305961));
		t.add(new Point(43099068, -89519645));
		t.add(new Point(43111182, -89346809));
		t.add(new Point(43075069, -89524111));
		t.add(new Point(43062480, -89300036));
		t.add(new Point(43058514, -89319475));
		t.add(new Point(43097940, -89303278));
		t.add(new Point(43040803, -89355712));
		t.add(new Point(43036312, -89461041));
		t.add(new Point(43096232, -89494712));
		t.add(new Point(43061027, -89507771));
		t.add(new Point(43035132, -89433005));
		t.add(new Point(43156645, -89287527));
		t.add(new Point(43144748, -89290275));
		t.add(new Point(43031337, -89405878));
		t.add(new Point(43094807, -89363427));
		t.add(new Point(43034032, -89402602));
		t.add(new Point(43047066, -89346969));
		t.add(new Point(43110795, -89506877));
		t.add(new Point(43090522, -89524561));
		t.add(new Point(43067762, -89517507));
		t.add(new Point(43073167, -89467125));
		t.add(new Point(43016611, -89475713));
		t.add(new Point(43030807, -89403157));
		t.add(new Point(43019160, -89508074));
		t.add(new Point(43030041, -89394947));
		t.add(new Point(43034443, -89443318));
		t.add(new Point(43072424, -89423549));
		t.add(new Point(43073966, -89433897));
		t.add(new Point(43049960, -89475583));
		t.add(new Point(43062823, -89436047));
		t.add(new Point(43073002, -89463929));
		t.add(new Point(43067915, -89427926));
		t.add(new Point(43075451, -89456624));
		t.add(new Point(43075113, -89443898));
		t.add(new Point(43049966, -89463322));
		t.add(new Point(43121496, -89348509));
		t.add(new Point(43051199, -89441627));
		t.add(new Point(43094313, -89509369));
		t.add(new Point(43075572, -89277911));
		t.add(new Point(43014148, -89431794));
		t.add(new Point(43072967, -89381809));
		t.add(new Point(43101747, -89330986));
		t.add(new Point(43026869, -89460053));
		t.add(new Point(43094863, -89302217));
		t.add(new Point(43057666, -89294955));
		t.add(new Point(43038712, -89450524));
		t.add(new Point(43081495, -89365174));
		t.add(new Point(43066568, -89308980));
		t.add(new Point(43026781, -89426220));
		t.add(new Point(43021358, -89417218));
		t.add(new Point(43060158, -89517625));
		t.add(new Point(43067729, -89409232));
		t.add(new Point(43069714, -89519660));
		t.add(new Point(43057563, -89513783));
		t.add(new Point(43049680, -89454434));
		t.add(new Point(43071168, -89400986));
		t.add(new Point(43052376, -89394985));
		t.add(new Point(43075181, -89410405));
		t.add(new Point(43053483, -89450538));
		t.add(new Point(43052792, -89435590));
		t.add(new Point(43050779, -89446662));
		t.add(new Point(43056029, -89472692));
		t.add(new Point(43078838, -89431026));
		t.add(new Point(43060730, -89513136));
		t.add(new Point(43061991, -89426330));
		t.add(new Point(43054923, -89469928));
		t.add(new Point(43029555, -89488886));
		t.add(new Point(43063850, -89457385));
		t.add(new Point(43128604, -89357986));
		t.add(new Point(43039223, -89473192));
		t.add(new Point(43060250, -89290992));
		t.add(new Point(43083410, -89360751));
		t.add(new Point(43099822, -89337363));
		t.add(new Point(43113342, -89358861));
		t.add(new Point(43155236, -89374808));
		t.add(new Point(43145088, -89378035));
		t.add(new Point(43028200, -89382644));
		t.add(new Point(43050276, -89377870));
		t.add(new Point(43067863, -89411305));
		t.add(new Point(43086191, -89436434));
		t.add(new Point(43080289, -89428136));
		t.add(new Point(43071655, -89455835));
		t.add(new Point(43078849, -89429817));
		t.add(new Point(43054934, -89432245));
		t.add(new Point(43074745, -89388354));
		t.add(new Point(43156497, -89372214));
		t.add(new Point(43046228, -89498416));
		t.add(new Point(43036181, -89461117));
		t.add(new Point(43066682, -89287144));
		t.add(new Point(43064679, -89398696));
		t.add(new Point(43073047, -89404072));
		t.add(new Point(43101313, -89301648));
		t.add(new Point(43098679, -89321739));
		t.add(new Point(43098631, -89321662));
		t.add(new Point(43076484, -89416199));
		t.add(new Point(43086317, -89524502));
		t.add(new Point(43073878, -89400809));
		t.add(new Point(43053655, -89451527));
		t.add(new Point(43062287, -89421371));
		t.add(new Point(43076023, -89532763));
		t.add(new Point(43062595, -89527497));
		t.add(new Point(43060843, -89454245));
		t.add(new Point(43115168, -89363706));
		t.add(new Point(43131001, -89363933));
		t.add(new Point(43093802, -89346952));
		t.add(new Point(43083733, -89361807));
		t.add(new Point(43123396, -89314581));
		t.add(new Point(43046214, -89502231));
		t.add(new Point(43013888, -89428267));
		t.add(new Point(43036580, -89488514));
		t.add(new Point(43070985, -89385499));
		t.add(new Point(43078640, -89384045));
		t.add(new Point(43085113, -89356590));
		t.add(new Point(43090646, -89367351));
		t.add(new Point(43093240, -89354243));
		t.add(new Point(43102082, -89291877));
		t.add(new Point(43036024, -89484277));
		t.add(new Point(43112683, -89358599));
		t.add(new Point(43047205, -89354260));
		t.add(new Point(43073600, -89283232));
		t.add(new Point(43062352, -89300462));
		t.add(new Point(43074685, -89378815));
		t.add(new Point(43049047, -89496216));
		t.add(new Point(43026602, -89494710));
		t.add(new Point(43099786, -89332692));
		t.add(new Point(43100404, -89366035));
		t.add(new Point(43100868, -89348207));
		t.add(new Point(43074933, -89386107));
		t.add(new Point(43101490, -89352586));
		t.add(new Point(43135082, -89363281));
		t.add(new Point(43063201, -89489070));
		t.add(new Point(43090699, -89485930));
		t.add(new Point(43064168, -89502519));
		t.add(new Point(43079996, -89509538));
		t.add(new Point(43060284, -89512756));
		t.add(new Point(43094492, -89511302));
		t.add(new Point(43087758, -89524699));
		t.add(new Point(43056840, -89517388));
		t.add(new Point(43069780, -89314289));
		t.add(new Point(43095425, -89290932));
		t.add(new Point(43062809, -89308719));
		t.add(new Point(43068441, -89387010));
		t.add(new Point(43032796, -89357984));
		t.add(new Point(43046371, -89491703));
		t.add(new Point(43037363, -89384628));
		t.add(new Point(43101648, -89520306));
		t.add(new Point(43074964, -89527648));
		t.add(new Point(43111617, -89514174));
		t.add(new Point(43038971, -89488421));
		t.add(new Point(43102865, -89493010));
		t.add(new Point(43041193, -89447225));
		t.add(new Point(43126969, -89301651));
		t.add(new Point(43034463, -89448657));
		t.add(new Point(43032160, -89448799));
		t.add(new Point(43075173, -89447095));
		t.add(new Point(43126181, -89363542));
		t.add(new Point(43053598, -89465958));
		t.add(new Point(43104204, -89489336));
		t.add(new Point(43069877, -89404025));
		t.add(new Point(43101460, -89517826));
		t.add(new Point(43109935, -89529322));
		t.add(new Point(43024493, -89505377));
		t.add(new Point(43075289, -89482475));
		t.add(new Point(43060699, -89443911));
		t.add(new Point(43051809, -89473671));
		t.add(new Point(43065541, -89503029));
		t.add(new Point(43046945, -89351409));
		t.add(new Point(43076894, -89302311));
		t.add(new Point(43059374, -89425792));
		t.add(new Point(43121047, -89310743));
		t.add(new Point(43072025, -89428286));
		t.add(new Point(43068443, -89452750));
		t.add(new Point(43074755, -89477989));
		t.add(new Point(43063635, -89419241));
		t.add(new Point(43046219, -89496589));
		t.add(new Point(43068143, -89468838));
		t.add(new Point(43072420, -89451345));
		t.add(new Point(43058052, -89295122));
		t.add(new Point(43140572, -89309474));
		t.add(new Point(43138373, -89289059));
		t.add(new Point(43084530, -89302971));
		t.add(new Point(43032052, -89477549));
		t.add(new Point(43087605, -89327417));
		t.add(new Point(43142728, -89305995));
		t.add(new Point(43076866, -89376682));
		t.add(new Point(43028951, -89459456));
		t.add(new Point(43030453, -89409630));
		t.add(new Point(43071307, -89388567));
		t.add(new Point(43034479, -89446946));
		t.add(new Point(43016239, -89423322));
		t.add(new Point(43075111, -89490879));
		t.add(new Point(43035001, -89396650));
		t.add(new Point(43053545, -89480320));
		t.add(new Point(43089899, -89486512));
		t.add(new Point(43067852, -89478158));
		t.add(new Point(43072765, -89459507));
		t.add(new Point(43072879, -89459796));
		t.add(new Point(43050989, -89444161));
		t.add(new Point(43068049, -89475407));
		t.add(new Point(43060918, -89451651));
		t.add(new Point(43049837, -89451287));
		t.add(new Point(43068776, -89454017));
		t.add(new Point(43073119, -89467727));
		t.add(new Point(43152443, -89286435));
		t.add(new Point(43115199, -89327049));
		t.add(new Point(43127110, -89307824));
		t.add(new Point(43106648, -89305053));
		t.add(new Point(43121105, -89308012));
		t.add(new Point(43005266, -89427927));
		t.add(new Point(43053994, -89395262));
		t.add(new Point(43047262, -89354358));
		t.add(new Point(43071719, -89450997));
		t.add(new Point(43072542, -89423577));
		t.add(new Point(43071346, -89439203));
		t.add(new Point(43029251, -89459299));
		t.add(new Point(43076171, -89479034));
		t.add(new Point(43064509, -89417554));
		t.add(new Point(43037465, -89404498));
		t.add(new Point(43044112, -89443697));
		t.add(new Point(43024714, -89459548));
		t.add(new Point(42997380, -89426898));
		t.add(new Point(43034909, -89423210));
		t.add(new Point(43015526, -89455882));
		t.add(new Point(43052221, -89395237));
		t.add(new Point(43038376, -89388592));
		t.add(new Point(43074874, -89389542));
		t.add(new Point(43137607, -89397757));
		t.add(new Point(43075536, -89276538));
		t.add(new Point(43073989, -89315237));
		t.add(new Point(43054959, -89523132));
		t.add(new Point(43038942, -89492853));
		t.add(new Point(43050284, -89501026));
		t.add(new Point(43034515, -89488591));
		t.add(new Point(43134757, -89397039));
		t.add(new Point(43071433, -89436476));
		t.add(new Point(43067954, -89393988));
		t.add(new Point(43094031, -89362729));
		t.add(new Point(43065621, -89423750));
		t.add(new Point(43090987, -89327940));
		t.add(new Point(43095888, -89326736));
		t.add(new Point(43074989, -89382342));
		t.add(new Point(43073193, -89301700));
		t.add(new Point(43083609, -89286349));
		t.add(new Point(43071113, -89314104));
		t.add(new Point(43113095, -89471989));
		t.add(new Point(43062112, -89315494));
		t.add(new Point(43068258, -89498987));
		t.add(new Point(43075023, -89512926));
		t.add(new Point(43145870, -89382856));
		t.add(new Point(43062571, -89303141));
		t.add(new Point(43098322, -89356843));
		t.add(new Point(43112844, -89348081));
		t.add(new Point(43027226, -89505796));
		t.add(new Point(43031967, -89464734));
		t.add(new Point(43051777, -89379570));
		t.add(new Point(43073333, -89398837));
		t.add(new Point(43026423, -89455509));
		t.add(new Point(43061956, -89323655));
		t.add(new Point(43075039, -89291571));
		t.add(new Point(43077095, -89291701));
		t.add(new Point(43111485, -89361702));
		t.add(new Point(43090108, -89362594));
		t.add(new Point(43076388, -89381564));
		t.add(new Point(43106881, -89345137));
		t.add(new Point(43074514, -89386186));
		t.add(new Point(43089625, -89368783));
		t.add(new Point(43097056, -89368159));
		t.add(new Point(43026125, -89475168));
		t.add(new Point(43063882, -89512628));
		t.add(new Point(43062674, -89527163));
		t.add(new Point(43092001, -89502039));
		t.add(new Point(43060622, -89496774));
		t.add(new Point(43075224, -89509328));
		t.add(new Point(43110367, -89474547));
		t.add(new Point(43135683, -89302470));
		t.add(new Point(43028842, -89456243));
		t.add(new Point(43032090, -89461593));
		t.add(new Point(43013447, -89480880));
		t.add(new Point(43138367, -89382995));
		t.add(new Point(43046524, -89503072));
		t.add(new Point(43087395, -89353241));
		t.add(new Point(43112300, -89363875));
		t.add(new Point(43089426, -89369592));
		t.add(new Point(43088784, -89293047));
		t.add(new Point(43074141, -89428672));
		t.add(new Point(43088730, -89302780));
		t.add(new Point(43059929, -89403805));
		t.add(new Point(43071969, -89395489));
		t.add(new Point(43021445, -89498699));
		t.add(new Point(43032064, -89482878));
		t.add(new Point(43070866, -89398734));
		t.add(new Point(43062442, -89314124));
		t.add(new Point(43099036, -89301685));
		t.add(new Point(43090196, -89485713));
		t.add(new Point(43096835, -89510793));
		t.add(new Point(43056718, -89501756));
		t.add(new Point(43135936, -89291346));
		t.add(new Point(43035170, -89385094));
		t.add(new Point(43085836, -89528020));
		t.add(new Point(43075168, -89497973));
		t.add(new Point(43104054, -89490488));
		t.add(new Point(43112700, -89475115));
		t.add(new Point(43099028, -89519438));
		t.add(new Point(43104004, -89300638));
		t.add(new Point(43076776, -89468669));
		t.add(new Point(43050542, -89447202));
		t.add(new Point(43082621, -89481950));
		t.add(new Point(43080865, -89303118));
		t.add(new Point(43077627, -89303159));
		t.add(new Point(43058501, -89312974));
		t.add(new Point(43123952, -89350933));
		t.add(new Point(43121260, -89330515));
		t.add(new Point(43122048, -89330218));
		t.add(new Point(43020882, -89476781));
		t.add(new Point(43093973, -89344855));
		t.add(new Point(43121440, -89317484));
		t.add(new Point(43114136, -89357807));
		t.add(new Point(43088118, -89370906));
		t.add(new Point(43047012, -89343898));
		t.add(new Point(43035451, -89380082));
		t.add(new Point(43092811, -89364554));
		t.add(new Point(43074306, -89436171));
		t.add(new Point(43064090, -89434146));
		t.add(new Point(43060819, -89441739));
		t.add(new Point(43064259, -89425234));
		t.add(new Point(43037718, -89448824));
		t.add(new Point(43060708, -89447134));
		t.add(new Point(43073972, -89433666));
		t.add(new Point(43019686, -89420395));
		t.add(new Point(43135685, -89315772));
		t.add(new Point(43035983, -89443529));
		t.add(new Point(43069178, -89463428));
		t.add(new Point(43059151, -89425745));
		t.add(new Point(43129478, -89363590));
		t.add(new Point(43129052, -89358719));
		t.add(new Point(43065600, -89423856));
		t.add(new Point(43068346, -89452770));
		t.add(new Point(43075378, -89441325));
		t.add(new Point(43072487, -89428580));
		t.add(new Point(43030106, -89396878));
		t.add(new Point(43060843, -89457131));
		t.add(new Point(43116115, -89296404));
		t.add(new Point(43136796, -89303383));
		t.add(new Point(43034903, -89370776));
		t.add(new Point(43076427, -89532582));
		t.add(new Point(43075104, -89413027));
		t.add(new Point(43096955, -89504275));
		t.add(new Point(43060886, -89497503));
		t.add(new Point(43076457, -89423976));
		t.add(new Point(43060855, -89500075));
		t.add(new Point(43097387, -89511460));
		t.add(new Point(43010425, -89477976));
		t.add(new Point(43025629, -89455470));
		t.add(new Point(43058240, -89517777));
		t.add(new Point(43026674, -89455775));
		t.add(new Point(43038252, -89450625));
		t.add(new Point(43034895, -89452926));
		t.add(new Point(43102965, -89344495));
		t.add(new Point(43099775, -89335457));
		t.add(new Point(43120077, -89329967));
		t.add(new Point(43061329, -89507893));
		t.add(new Point(43130715, -89312725));
		t.add(new Point(43039101, -89496931));
		t.add(new Point(43048250, -89351030));
		t.add(new Point(43031811, -89477116));
		t.add(new Point(43118927, -89321618));
		t.add(new Point(43029740, -89488759));
		t.add(new Point(43076851, -89388908));
		t.add(new Point(43090915, -89367228));
		t.add(new Point(43054074, -89433649));
		t.add(new Point(43076771, -89429104));
		t.add(new Point(43051404, -89440021));
		t.add(new Point(43065293, -89400583));
		t.add(new Point(43073381, -89386089));
		t.add(new Point(43045719, -89451351));
		t.add(new Point(43095985, -89368756));
		t.add(new Point(43054456, -89398927));
		t.add(new Point(43057681, -89514247));
		t.add(new Point(43106011, -89526419));
		t.add(new Point(43055166, -89523304));
		t.add(new Point(43079320, -89529198));
		t.add(new Point(43073964, -89526967));
		t.add(new Point(43082801, -89302913));
		t.add(new Point(43097389, -89534401));
		t.add(new Point(43068002, -89413996));
		t.add(new Point(43129987, -89358523));
		t.add(new Point(43082820, -89380584));
		t.add(new Point(43074669, -89386819));
		t.add(new Point(43082282, -89373762));
		t.add(new Point(42995268, -89427558));
		t.add(new Point(43073066, -89391033));
		t.add(new Point(43046286, -89488451));
		t.add(new Point(43046035, -89488900));
		t.add(new Point(43077548, -89385973));
		t.add(new Point(43032187, -89488701));
		t.add(new Point(43027084, -89414878));
		t.add(new Point(43049446, -89351607));
		t.add(new Point(43060876, -89465266));
		t.add(new Point(43074792, -89478100));
		t.add(new Point(43074431, -89428862));
		t.add(new Point(43134181, -89371139));
		t.add(new Point(43090121, -89316452));
		t.add(new Point(43143407, -89368086));
		t.add(new Point(43098726, -89304819));
		t.add(new Point(43058331, -89292414));
		t.add(new Point(43079921, -89384119));
		t.add(new Point(43035010, -89452536));
		t.add(new Point(43042128, -89384274));
		t.add(new Point(43102606, -89364568));
		t.add(new Point(43071895, -89404041));
		t.add(new Point(43093125, -89363647));
		t.add(new Point(43138098, -89300545));
		t.add(new Point(43084089, -89526965));
		t.add(new Point(43122327, -89349802));
		t.add(new Point(43075140, -89507162));
		t.add(new Point(43063620, -89502848));
		t.add(new Point(43107073, -89300672));
		t.add(new Point(43021566, -89501478));
		t.add(new Point(43050276, -89503958));
		t.add(new Point(43049807, -89503322));
		t.add(new Point(43125594, -89355001));
		t.add(new Point(43034417, -89461496));
		t.add(new Point(43092166, -89316431));
		t.add(new Point(43071827, -89397315));
		t.add(new Point(43067474, -89291533));
		t.add(new Point(43063879, -89314372));
		t.add(new Point(43091982, -89359354));
		t.add(new Point(43078962, -89368721));
		t.add(new Point(43044336, -89391798));
		t.add(new Point(43101117, -89365352));
		t.add(new Point(43083767, -89361975));
		t.add(new Point(43095292, -89352709));
		t.add(new Point(43072029, -89409137));
		t.add(new Point(43038677, -89394822));
		t.add(new Point(43038677, -89394822));
		t.add(new Point(43038846, -89473486));
		t.add(new Point(43035514, -89416021));
		t.add(new Point(43104627, -89341822));
		t.add(new Point(43032094, -89480202));
		t.add(new Point(43061749, -89294135));
		t.add(new Point(43030304, -89507918));
		t.add(new Point(43084534, -89293759));
		t.add(new Point(43117204, -89330632));
		t.add(new Point(43049333, -89400594));
		t.add(new Point(43054415, -89489646));
		t.add(new Point(43088585, -89501954));
		t.add(new Point(43081137, -89502575));
		t.add(new Point(43051651, -89399063));
		t.add(new Point(43129177, -89304243));
		t.add(new Point(43133854, -89392959));
		t.add(new Point(43098881, -89304460));
		t.add(new Point(43110501, -89330448));
		t.add(new Point(43145699, -89380455));
		t.add(new Point(43133809, -89383636));
		t.add(new Point(43033463, -89388167));
		t.add(new Point(43033402, -89380806));
		t.add(new Point(43044202, -89503454));
		t.add(new Point(43079336, -89480095));
		t.add(new Point(43055175, -89470305));
		t.add(new Point(43087912, -89504236));
		t.add(new Point(43095989, -89486162));
		t.add(new Point(43051922, -89517456));
		t.add(new Point(43078359, -89430066));
		t.add(new Point(43053668, -89474781));
		t.add(new Point(43053816, -89474808));
		t.add(new Point(43125323, -89350104));
		t.add(new Point(43112642, -89330398));
		t.add(new Point(43142372, -89293676));
		t.add(new Point(43125859, -89309912));
		t.add(new Point(43130627, -89310169));
		t.add(new Point(43093345, -89348660));
		t.add(new Point(43098287, -89326947));
		t.add(new Point(43087368, -89365944));
		t.add(new Point(43095431, -89368914));
		t.add(new Point(43069289, -89463167));
		t.add(new Point(43077497, -89428978));
		t.add(new Point(42988521, -89545995));
		t.add(new Point(43096296, -89488803));
		t.add(new Point(43037787, -89448877));
		t.add(new Point(43027041, -89431471));
		t.add(new Point(43011773, -89429724));
		t.add(new Point(43142385, -89303284));
		t.add(new Point(43031622, -89458948));
		t.add(new Point(43135706, -89287988));
		t.add(new Point(43143707, -89382811));
		t.add(new Point(43120629, -89298877));
		t.add(new Point(43061148, -89438018));
		t.add(new Point(43120473, -89326874));
		t.add(new Point(43120532, -89327209));
		t.add(new Point(43107130, -89330507));
		t.add(new Point(43133815, -89377623));
		t.add(new Point(43138027, -89300574));
		t.add(new Point(43073337, -89413257));
		t.add(new Point(43079853, -89323601));
		t.add(new Point(43098852, -89296725));
		t.add(new Point(43061196, -89310003));
		t.add(new Point(43048227, -89347185));
		t.add(new Point(43075419, -89507475));
		t.add(new Point(43087938, -89483334));
		t.add(new Point(43089335, -89508200));
		t.add(new Point(43067493, -89496833));
		t.add(new Point(43086257, -89434878));
		t.add(new Point(43089334, -89433693));
		t.add(new Point(43031548, -89456572));
		t.add(new Point(43120940, -89317432));
		t.add(new Point(43158124, -89285783));
		t.add(new Point(43046141, -89450990));
		t.add(new Point(43122514, -89349810));
		t.add(new Point(43121178, -89347952));
		t.add(new Point(43074147, -89282888));
		t.add(new Point(43073318, -89293335));
		t.add(new Point(43042346, -89369443));
		t.add(new Point(43081242, -89502630));
		t.add(new Point(43067293, -89454407));
		t.add(new Point(43107389, -89535977));
		t.add(new Point(43085746, -89528659));
		t.add(new Point(43105875, -89509985));
		t.add(new Point(43074080, -89406253));
		t.add(new Point(43106058, -89520755));
		t.add(new Point(43044008, -89393882));
		t.add(new Point(43075824, -89400023));
		t.add(new Point(43076975, -89392201));
		t.add(new Point(43079601, -89323489));
		t.add(new Point(43066118, -89303032));
		t.add(new Point(43068368, -89314419));
		t.add(new Point(43083670, -89316193));
		t.add(new Point(43074081, -89392363));
		t.add(new Point(43080038, -89376946));
		t.add(new Point(43096617, -89351495));
		t.add(new Point(43012652, -89498656));
		t.add(new Point(43093027, -89350537));
		t.add(new Point(43084753, -89370220));
		t.add(new Point(43084426, -89362347));
		t.add(new Point(43107923, -89480161));
		t.add(new Point(43060412, -89519366));
		t.add(new Point(43067722, -89407559));
		t.add(new Point(43085322, -89532152));
		t.add(new Point(43072095, -89406013));
		t.add(new Point(43039144, -89485961));
		t.add(new Point(43036124, -89492941));
		t.add(new Point(43099438, -89332753));
		t.add(new Point(43048708, -89392769));
		t.add(new Point(43034609, -89461292));
		t.add(new Point(43041597, -89373863));
		t.add(new Point(43028274, -89382375));
		t.add(new Point(43055183, -89432020));
		t.add(new Point(43123354, -89363587));
		t.add(new Point(43099680, -89332824));
		t.add(new Point(43034685, -89385494));
		t.add(new Point(43106718, -89351639));
		t.add(new Point(43069020, -89392346));
		t.add(new Point(43073494, -89311599));
		t.add(new Point(42990514, -89533090));
		t.add(new Point(42999910, -89426225));
		t.add(new Point(43095276, -89352591));
		t.add(new Point(43070449, -89414017));
		t.add(new Point(43072027, -89400138));
		t.add(new Point(43044399, -89404104));
		t.add(new Point(43029699, -89431753));
		t.add(new Point(43037015, -89477761));
		t.add(new Point(43050110, -89502622));
		t.add(new Point(43105759, -89502458));
		t.add(new Point(43074574, -89378787));
		t.add(new Point(43065214, -89525544));
		t.add(new Point(43101272, -89518417));
		t.add(new Point(43117765, -89323588));
		t.add(new Point(43060152, -89515742));
		t.add(new Point(43076577, -89502099));
		t.add(new Point(43073478, -89283156));
		t.add(new Point(43133047, -89355467));
		t.add(new Point(43071416, -89314192));
		t.add(new Point(42995355, -89425475));
		t.add(new Point(43149079, -89372350));
		t.add(new Point(43138827, -89385608));
		t.add(new Point(43105024, -89363840));
		t.add(new Point(43114319, -89361665));
		t.add(new Point(43081232, -89365346));
		t.add(new Point(43039191, -89466872));
		t.add(new Point(43077194, -89372879));
		t.add(new Point(43016075, -89511559));
		t.add(new Point(43031757, -89473126));
		t.add(new Point(43046385, -89488667));
		t.add(new Point(43016332, -89496630));
		t.add(new Point(43024528, -89505567));
		t.add(new Point(43133085, -89369245));
		t.add(new Point(43063928, -89314479));
		t.add(new Point(43104377, -89492923));
		t.add(new Point(43109100, -89501999));
		t.add(new Point(43098125, -89494257));
		t.add(new Point(43055609, -89525566));
		t.add(new Point(43043029, -89391946));
		t.add(new Point(43113130, -89330208));
		t.add(new Point(43067670, -89403800));
		t.add(new Point(43109858, -89296618));
		t.add(new Point(43039143, -89463784));
		t.add(new Point(43047280, -89350968));
		t.add(new Point(43032720, -89457765));
		t.add(new Point(43092987, -89530089));
		t.add(new Point(43015405, -89477760));
		t.add(new Point(43053597, -89447627));
		t.add(new Point(43068652, -89450996));
		t.add(new Point(43097076, -89504633));
		t.add(new Point(43061500, -89512753));
		t.add(new Point(43050821, -89437312));
		t.add(new Point(43076635, -89530575));
		t.add(new Point(43125821, -89325615));
		t.add(new Point(43048331, -89351052));
		t.add(new Point(43147357, -89290014));
		t.add(new Point(43128901, -89309646));
		t.add(new Point(43024271, -89469833));
		t.add(new Point(43056051, -89468015));
		t.add(new Point(43034058, -89454939));
		t.add(new Point(43068067, -89450047));
		t.add(new Point(42989120, -89540518));
		t.add(new Point(43058435, -89427391));
		t.add(new Point(43064141, -89471270));
		t.add(new Point(43057593, -89441890));
		t.add(new Point(43078940, -89426722));
		t.add(new Point(43125555, -89330307));
		t.add(new Point(43073376, -89433970));
		t.add(new Point(43076475, -89412392));
		t.add(new Point(43062326, -89302822));
		t.add(new Point(43118406, -89297906));
		t.add(new Point(43134928, -89373953));
		t.add(new Point(43133783, -89373194));
		t.add(new Point(43071458, -89308406));
		t.add(new Point(43038531, -89401257));
		t.add(new Point(43098159, -89318457));
		t.add(new Point(43048984, -89394221));
		t.add(new Point(43043924, -89385784));
		t.add(new Point(43041942, -89391875));
		t.add(new Point(43035121, -89425134));
		t.add(new Point(43026738, -89462025));
		t.add(new Point(43034970, -89435651));
		t.add(new Point(43040220, -89448473));
		t.add(new Point(43094482, -89517100));
		t.add(new Point(43067783, -89468568));
		t.add(new Point(43070713, -89510494));
		t.add(new Point(43060722, -89478147));
		t.add(new Point(43076521, -89467889));
		t.add(new Point(43052470, -89483818));
		t.add(new Point(43076090, -89416040));
		t.add(new Point(43098286, -89313596));
		t.add(new Point(43104125, -89300629));
		t.add(new Point(43102484, -89364087));
		t.add(new Point(43121536, -89324556));
		t.add(new Point(43073729, -89313901));
		t.add(new Point(43059531, -89294165));
		t.add(new Point(43098919, -89302026));
		t.add(new Point(43031223, -89381568));
		t.add(new Point(43050661, -89473320));
		t.add(new Point(43013087, -89457535));
		t.add(new Point(43069434, -89444368));
		t.add(new Point(43125594, -89327210));
		t.add(new Point(43041808, -89488394));
		t.add(new Point(43066082, -89468948));
		t.add(new Point(43060976, -89478781));
		t.add(new Point(43091782, -89518716));
		t.add(new Point(43096719, -89495909));
		t.add(new Point(43080317, -89524433));
		t.add(new Point(43084192, -89428835));
		t.add(new Point(43057185, -89517601));
		t.add(new Point(43059371, -89441855));
		t.add(new Point(43124928, -89355291));
		t.add(new Point(43106692, -89498486));
		t.add(new Point(43087342, -89359008));
		t.add(new Point(43092613, -89350784));
		t.add(new Point(43046405, -89477608));
		t.add(new Point(43024308, -89499723));
		t.add(new Point(43046263, -89491247));
		t.add(new Point(43043833, -89487699));
		t.add(new Point(43075157, -89410376));
		t.add(new Point(43031630, -89501688));
		t.add(new Point(43051996, -89390897));
		t.add(new Point(43043599, -89473512));
		t.add(new Point(43069489, -89401069));
		t.add(new Point(43058420, -89319396));
		t.add(new Point(43078472, -89317973));
		t.add(new Point(43049948, -89471433));
		t.add(new Point(43073517, -89416551));
		t.add(new Point(43040135, -89354492));
		t.add(new Point(43087400, -89359165));
		t.add(new Point(43137345, -89363323));
		t.add(new Point(43122684, -89354899));
		t.add(new Point(43047279, -89347840));
		t.add(new Point(43107065, -89354439));
		t.add(new Point(43083940, -89361927));
		t.add(new Point(43123572, -89351927));
		t.add(new Point(43044292, -89394213));
		t.add(new Point(43044443, -89403831));
		t.add(new Point(43068482, -89404009));
		t.add(new Point(43092733, -89490604));
		t.add(new Point(43020119, -89421683));
		t.add(new Point(43080271, -89384072));
		t.add(new Point(43067564, -89394150));
		t.add(new Point(43032033, -89489123));
		t.add(new Point(43053143, -89384484));
		t.add(new Point(43067994, -89470469));
		t.add(new Point(43093947, -89370772));
		t.add(new Point(43061288, -89502583));
		t.add(new Point(43016679, -89475910));
		t.add(new Point(43060957, -89482173));
		t.add(new Point(43074767, -89531262));
		t.add(new Point(43051597, -89481673));
		t.add(new Point(43110212, -89521217));
		t.add(new Point(43104265, -89492943));
		t.add(new Point(43090902, -89340736));
		t.add(new Point(43076946, -89376610));
		t.add(new Point(43012711, -89490943));
		t.add(new Point(43103105, -89350544));
		t.add(new Point(43089789, -89362439));
		t.add(new Point(43031803, -89479959));
		t.add(new Point(43015344, -89466981));
		t.add(new Point(43035888, -89496918));
		t.add(new Point(43021697, -89500927));
		t.add(new Point(43132333, -89363549));
		t.add(new Point(43137205, -89363142));
		t.add(new Point(43139194, -89363212));
		t.add(new Point(43031170, -89410896));
		t.add(new Point(43066729, -89524120));
		t.add(new Point(43097273, -89511633));
		t.add(new Point(43073367, -89291092));
		t.add(new Point(43109982, -89309908));
		t.add(new Point(43079519, -89316278));
		t.add(new Point(43056728, -89498696));
		t.add(new Point(43059305, -89513541));
		t.add(new Point(43052081, -89518365));
		t.add(new Point(43081796, -89533992));
		t.add(new Point(43097042, -89498711));
		t.add(new Point(43053791, -89390205));
		t.add(new Point(43076796, -89282667));
		t.add(new Point(43038567, -89403078));
		t.add(new Point(43066657, -89287325));
		t.add(new Point(43056289, -89291816));
		t.add(new Point(43040156, -89354668));
		t.add(new Point(43059761, -89512731));
		t.add(new Point(43105929, -89484177));
		t.add(new Point(43050936, -89513624));
		t.add(new Point(43090209, -89525289));
		t.add(new Point(43060691, -89491681));
		t.add(new Point(43019433, -89419016));
		t.add(new Point(43060966, -89465340));
		t.add(new Point(43014001, -89431679));
		t.add(new Point(43032305, -89452638));
		t.add(new Point(43053968, -89389946));
		t.add(new Point(43059582, -89400841));
		t.add(new Point(43095489, -89363524));
		t.add(new Point(43071061, -89407019));
		t.add(new Point(43038390, -89390800));
		t.add(new Point(43106757, -89347226));
		t.add(new Point(43103367, -89350511));
		t.add(new Point(43056300, -89399077));
		t.add(new Point(43074887, -89396803));
		t.add(new Point(42988317, -89546054));
		t.add(new Point(43058085, -89427418));
		t.add(new Point(43063731, -89456212));
		t.add(new Point(43012461, -89478495));
		t.add(new Point(43073894, -89436301));
		t.add(new Point(43064455, -89433878));
		t.add(new Point(43083461, -89480480));
		t.add(new Point(43024142, -89414626));
		t.add(new Point(43066158, -89415123));
		t.add(new Point(43066219, -89284858));
		t.add(new Point(43049964, -89467429));
		t.add(new Point(43060977, -89457976));
		t.add(new Point(43053332, -89451292));
		t.add(new Point(43071578, -89388519));
		t.add(new Point(43078181, -89433241));
		t.add(new Point(43060939, -89454511));
		t.add(new Point(43120295, -89298411));
		t.add(new Point(43061035, -89438506));
		t.add(new Point(43068078, -89400812));
		t.add(new Point(43062209, -89297587));
		t.add(new Point(43049853, -89392523));
		t.add(new Point(43064785, -89398031));
		t.add(new Point(43001485, -89425388));
		t.add(new Point(43073913, -89467932));
		t.add(new Point(43049871, -89455138));
		t.add(new Point(43026599, -89459824));
		t.add(new Point(43098783, -89310373));
		t.add(new Point(43128792, -89309410));
		t.add(new Point(43079964, -89509348));
		t.add(new Point(43130637, -89312718));
		t.add(new Point(43060462, -89502561));
		t.add(new Point(43095619, -89523719));
		t.add(new Point(43090519, -89435668));
		t.add(new Point(43100160, -89493662));
		t.add(new Point(43096507, -89485860));
		t.add(new Point(43078969, -89429268));
		t.add(new Point(43099011, -89313052));
		t.add(new Point(43130762, -89315279));
		t.add(new Point(43129630, -89294922));
		t.add(new Point(43036876, -89488649));
		t.add(new Point(43076467, -89276625));
		t.add(new Point(43082857, -89324735));
		t.add(new Point(43066810, -89308624));
		t.add(new Point(43038340, -89379721));
		t.add(new Point(43041528, -89373863));
		t.add(new Point(43031754, -89501758));
		t.add(new Point(43060585, -89472251));
		t.add(new Point(43055985, -89430505));
		t.add(new Point(43067648, -89429544));
		t.add(new Point(43125566, -89323295));
		t.add(new Point(43070976, -89423829));
		t.add(new Point(43109798, -89521073));
		t.add(new Point(43095360, -89493891));
		t.add(new Point(43073290, -89417263));
		t.add(new Point(43075173, -89456248));
		t.add(new Point(43090208, -89527509));
		t.add(new Point(43056585, -89472784));
		t.add(new Point(43073146, -89419398));
		t.add(new Point(43134882, -89363158));
		t.add(new Point(43101792, -89352351));
		t.add(new Point(43048325, -89347247));
		t.add(new Point(43019805, -89503455));
		t.add(new Point(43103590, -89350450));
		t.add(new Point(43087759, -89373347));
		t.add(new Point(43034838, -89473526));
		t.add(new Point(43031584, -89488896));
		t.add(new Point(43039094, -89473094));
		t.add(new Point(43026409, -89488829));
		t.add(new Point(43073303, -89396115));
		t.add(new Point(43031721, -89496541));
		t.add(new Point(43074802, -89451318));
		t.add(new Point(43041803, -89392911));
		t.add(new Point(43070794, -89400718));
		t.add(new Point(43070796, -89383911));
		t.add(new Point(43075933, -89388251));
		t.add(new Point(43062461, -89314291));
		t.add(new Point(43071350, -89308496));
		t.add(new Point(43091766, -89355489));
		t.add(new Point(43085591, -89374529));
		t.add(new Point(43134680, -89355756));
		t.add(new Point(43137799, -89382743));
		t.add(new Point(43118461, -89355221));
		t.add(new Point(43032283, -89386562));
		t.add(new Point(43100083, -89346548));
		t.add(new Point(43106358, -89340064));
		t.add(new Point(43090819, -89325533));
		t.add(new Point(43077878, -89370083));
		t.add(new Point(43098081, -89357302));
		t.add(new Point(43075839, -89525220));
		t.add(new Point(43073630, -89385671));
		t.add(new Point(43154542, -89285308));
		t.add(new Point(43004856, -89420521));
		t.add(new Point(43063893, -89507421));
		t.add(new Point(43089701, -89329819));
		t.add(new Point(43136065, -89376527));
		t.add(new Point(43014884, -89490711));
		t.add(new Point(43126180, -89307251));
		t.add(new Point(43106228, -89498427));
		t.add(new Point(43109522, -89296711));
		t.add(new Point(43060697, -89487402));
		t.add(new Point(43093127, -89508677));
		t.add(new Point(43082062, -89524693));
		t.add(new Point(43111190, -89332936));
		t.add(new Point(43048351, -89339578));
		t.add(new Point(43074639, -89412718));
		t.add(new Point(43078325, -89390133));
		t.add(new Point(43086348, -89433704));
		t.add(new Point(43075922, -89397612));
		t.add(new Point(43100080, -89348237));
		t.add(new Point(43082380, -89373012));
		t.add(new Point(43090449, -89348928));
		t.add(new Point(43143072, -89362949));
		t.add(new Point(43026586, -89494972));
		t.add(new Point(43070287, -89384453));
		t.add(new Point(43050001, -89478229));
		t.add(new Point(43068476, -89502316));
		t.add(new Point(43038553, -89397555));
		t.add(new Point(43007772, -89428520));
		t.add(new Point(43022638, -89505624));
		t.add(new Point(43070250, -89390357));
		t.add(new Point(43071687, -89392872));
		t.add(new Point(43032159, -89484614));
		t.add(new Point(43041511, -89393876));
		t.add(new Point(43073603, -89311565));
		t.add(new Point(43090301, -89321716));
	}
}